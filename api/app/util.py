import json
import logging

logger = logging.getLogger('uvicorn.info')

def result_parser(result: dict) -> dict:
    """
    Parses the result dictionary to extract relevant information.
    Args:
        result (dict): The result dictionary containing classification data.
    {
        "html": "<html>\n  <head>\n    <title>Image Classification</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Image Classification</h1>\n      \n      <div class=\"upload-section\">\n        <div class=\"upload-zone\">\n          <i class=\"fas fa-cloud-upload-alt\"></i>\n          <p>Drag and drop images here or click to select</p>\n          <input type=\"file\" id=\"image-input\" multiple accept=\"image/*\" class=\"hidden\">\n        </div>\n      </div>\n\n      <div class=\"images-container\" id=\"images-container\"></div>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  </body>\n</html>",
        "css": "body {\n  font-family: Arial, sans-serif;\n  margin: 20px;\n  background-color: #f5f5f5;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.upload-section {\n  text-align: center;\n  margin: 20px 0;\n}\n\n.upload-zone {\n  border: 2px dashed #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin: 10px;\n}\n\n.upload-zone:hover {\n  border-color: #4CAF50;\n  background-color: rgba(76,175,80,0.05);\n}\n\n.upload-zone i {\n  font-size: 3em;\n  color: #666;\n  margin-bottom: 10px;\n}\n\n.images-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  padding: 20px;\n}\n\n.image-card {\n  background: white;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  margin: 10px;\n}\n\n.image-preview {\n  max-width: 100%;\n  height: auto;\n  margin-bottom: 10px;\n  border-radius: 4px;\n}\n\n.loading {\n  display: flex;\n  justify-content: center;\n  margin: 10px 0;\n}\n\n.loading i {\n  font-size: 1.5em;\n  color: #666;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.result {\n  padding: 10px;\n  background-color: #f8f9fa;\n  border-radius: 4px;\n  margin-top: 10px;\n}\n\n.result-label {\n  font-weight: bold;\n  color: #333;\n}\n\n.result-confidence {\n  color: #666;\n  font-size: 0.9em;\n}\n\n.hidden {\n  display: none;\n}\n",
        "js": "function handleImageUpload() {\n  const imageInput = document.getElementById('image-input');\n  const uploadZone = document.querySelector('.upload-zone');\n  const imagesContainer = document.getElementById('images-container');\n\n  // Handle file input\n  imageInput.addEventListener('change', function(e) {\n    handleFiles(e.target.files);\n  });\n\n  // Handle drag and drop\n  uploadZone.addEventListener('dragover', function(e) {\n    e.preventDefault();\n    uploadZone.style.borderColor = '#4CAF50';\n  });\n\n  uploadZone.addEventListener('dragleave', function(e) {\n    e.preventDefault();\n    uploadZone.style.borderColor = '#ccc';\n  });\n\n  uploadZone.addEventListener('drop', function(e) {\n    e.preventDefault();\n    uploadZone.style.borderColor = '#ccc';\n    const files = e.dataTransfer.files;\n    handleFiles(files);\n  });\n}\n\nfunction handleFiles(files) {\n  const imagesContainer = document.getElementById('images-container');\n\n  Array.from(files).forEach(file => {\n    if (file.type.startsWith('image/')) {\n      const imageCard = createImageCard();\n      imagesContainer.appendChild(imageCard);\n      displayImagePreview(file, imageCard);\n      processImage(file, imageCard);\n    }\n  });\n}\n\nfunction createImageCard() {\n  const card = document.createElement('div');\n  card.className = 'image-card';\n  card.innerHTML = '\n    <div class=\"loading\">\n      <i class=\"fas fa-spinner fa-spin\"></i>\n    </div>\n    <div class=\"result\">\n      <div class=\"result-label\"></div>\n      <div class=\"result-confidence\"></div>\n    </div>\n  ';\n  return card;\n}\n\nfunction displayImagePreview(file, card) {\n  const reader = new FileReader();\n  reader.onload = function(e) {\n    const imagePreview = document.createElement('img');\n    imagePreview.className = 'image-preview';\n    imagePreview.src = e.target.result;\n    card.insertBefore(imagePreview, card.firstChild);\n  };\n  reader.readAsDataURL(file);\n}\n\nfunction processImage(file, card) {\n  const loadingElement = card.querySelector('.loading');\n  const resultElement = card.querySelector('.result');\n\n  loadingElement.style.display = 'flex';\n  resultElement.style.display = 'none';\n\n  const reader = new FileReader();\n  reader.onload = function(e) {\n    const base64Image = e.target.result.split(',')[1];\n    const requestData = {\n      data: base64Image\n    };\n\n    fetch('http://34.142.220.207:8000/api/image-classification', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData)\n    })\n    .then(response => response.json())\n    .then(data => {\n      // Apply softmax\n      const probabilities = softmax(data);\n      const maxProbability = Math.max(...probabilities);\n      const predictedLabelIndex = probabilities.indexOf(maxProbability);\n      \n      // Get human-readable label\n      fetch('label_mapping.json')\n        .then(response => response.json())\n        .then(mapping => {\n          const label = mapping[predictedLabelIndex];\n          updateResult(card, label, maxProbability);\n        })\n        .catch(error => {\n          console.error('Error loading label mapping:', error);\n          updateResult(card, 'Unknown', maxProbability);\n        });\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      loadingElement.style.display = 'none';\n      resultElement.style.display = 'block';\n      resultElement.innerHTML = 'Error processing image';\n    });\n  };\n  reader.readAsDataURL(file);\n}\n\nfunction softmax(arr) {\n  const max = Math.max(...arr);\n  const exp = arr.map(x => Math.exp(x - max));\n  const sum = exp.reduce((a, b) => a + b, 0);\n  return exp.map(x => x / sum);\n}\n\nfunction updateResult(card, label, confidence) {\n  const loadingElement = card.querySelector('.loading');\n  const resultElement = card.querySelector('.result');\n  \n  loadingElement.style.display = 'none';\n  resultElement.style.display = 'block';\n  resultElement.querySelector('.result-label').textContent = label;\n  resultElement.querySelector('.result-confidence').textContent = `Confidence: ${confidence.toFixed(2)}`;\n}\n\n// Initialize\nhandleImageUpload();"
    }
    """
    print(result.get("html", ""))
    return {
  "html": "<!-- Responsive Card Layout -->\n<div class=\"responsive-card\">\n  <!-- Navbar -->\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#about\">About</a></li>\n    </ul>\n  </nav>\n  <!-- Card Body -->\n  <div class=\"card-body\">\n    <!-- Input Section -->\n    <section class=\"input-section\">\n      <h2>Image Classification</h2>\n      <p>Classify an image into one of the 1000 classes using the provided model.</p>\n      <!-- File Upload Input with Drag and Drop -->\n      <div class=\"file-upload-container\">\n        <input type=\"file\" id=\"image\" accept=\".jpg, .jpeg, .png\" />\n        <label for=\"image\" class=\"file-upload-label\">Upload Image</label>\n        <div class=\"drag-drop-zone\" id=\"dropZone\">Drag and drop or click to upload</div>\n      </div>\n    </section>\n    <!-- Action Section -->\n    <section class=\"action-section\">\n      <button id=\"classify-image\" class=\"classify-btn\" disabled><span class=\"button-text\">Classify Image</span></button>\n      <div class=\"loading-spinner\" id=\"loadingSpinner\" style=\"display: none;\">Loading...</div>\n    </section>\n    <!-- Output Section -->\n    <section class=\"output-section\">\n      <!-- Image Result Output -->\n      <div id=\"input-image\" class=\"image-preview\"></div>\n      <!-- Text Block Output -->\n      <div id=\"predicted-label\" class=\"prediction-label\"></div>\n      <div id=\"predicted-label-probability\" class=\"probability-bar\"></div>\n    </section>\n  </div>\n  <!-- Footer -->\n  <footer>\n    <p>Image Classification Task</p>\n    <p>API URL: <a href=\"http://34.142.220.207:8000/api/image-classification\">http://34.142.220.207:8000/api/image-classification</a></p>\n    <p>Version: 1.0</p>\n  </footer>\n</div>",
  "css": "/* Responsive Card Layout CSS */\n.responsive-card {\n  max-width: 800px;\n  margin: 40px auto;\n  padding: 20px;\n  background-color: #f7f7f7;\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.card-body {\n  padding: 20px;\n}\n\n.input-section {\n  margin-bottom: 20px;\n}\n\n.action-section {\n  margin-bottom: 20px;\n  position: relative;\n}\n\n.output-section {\n  margin-bottom: 20px;\n}\n\n.image-preview {\n  width: 100%;\n  height: 200px;\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  background-color: #f7f7f7;\n  object-fit: contain;\n}\n\n.file-upload-container {\n  position: relative;\n  margin-bottom: 20px;\n}\n\n.file-upload-label {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n}\n\n.drag-drop-zone {\n  border: 2px dashed #ccc;\n  padding: 20px;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.drag-drop-zone.dragover {\n  border-color: #2196F3;\n  background-color: rgba(33, 150, 243, 0.1);\n}\n\n.classify-btn {\n  width: 100%;\n  padding: 12px;\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.classify-btn:hover {\n  background-color: #1976D2;\n}\n\n.classify-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.loading-spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 30px;\n  height: 30px;\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #2196F3;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: translate(-50%, -50%) rotate(0deg); }\n  100% { transform: translate(-50%, -50%) rotate(360deg); }\n}\n\n.prediction-label {\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #e3f2fd;\n  border-radius: 4px;\n}\n\n.probability-bar {\n  padding: 10px;\n  background-color: #"
    }

data = "{\"html\": \"<!DOCTYPE html>\n<html lang=\\\"en\\\">\n   <head>\n      <meta charset=\\\"UTF-8\\\">\n      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n      <title>Image Classification</title>\n      <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\">\n   </head>\n   <body>\n      <nav>\n         <ul>\n            <li><a href=\\\"#\\\">Home</a></li>\n            <li><a href=\\\"#about\\\">About</a></li>\n         </ul>\n      </nav>\n      <main>\n         <div class=\\\"responsive-card\\\">\n            <h1>Image Classification</h1>\n            <p>Classify an image into one of the 1000 classes using the provided model.</p>\n            <form id=\\\"image-form\\\">\n               <input type=\\\"file\\\" id=\\\"image\\\" accept=\\\".jpg, .jpeg, .png\\\" aria-label=\\\"Upload Image\\\" />\n               <button id=\\\"classify-button\\\">Classify Image</button>\n            <div id=\\\"image-result\\\"></div>\n            <div id=\\\"predicted-label\\\"></div>\n         </div>\n      </main>\n      <footer>\n         <p>Image Classification Task</p>\n         <p>API URL: <a href=\\\"http://34.142.220.207:8000/api/image-classification\\\">http://34.142.220.207:8000/api/image-classification</a></p>\n         <p>Version: 1.0</p>\n      </footer>\n      <script src=\\\"script.js\\\"></script>\n   </body>\n</html>\",\n\"css\": \".responsive-card {\n      max-width: 800px;\n      margin: 40px auto;\n      padding: 20px;\n      border-radius: 10px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n   }\n   #image-form {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n   }\n   #image {\n      margin-bottom: 20px;\n   }\n   #classify-button {\n      background-color: #4CAF50;\n      color: #fff;\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n   }\n   #classify-button:hover {\n      background-color: #3e8e41;\n   }\n   #image-result {\n      margin-top: 20px;\n   }\n   #predicted-label {\n      margin-top: 20px;\n   }\n   @media only screen and (max-width: 600px) {\n      .responsive-card {\n         width: 100%;\n         padding: 10px;\n      }\n   }\n   .image-preview {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius: 10px;\n   }\n   .probability-bar {\n      width: 100%;\n      height: 20px;\n      background-color: #ddd;\n      border-radius: 10px;\n   }\n   .list-display {\n      list-style: none;\n   }\n   .list-display li {\n      padding: 10px;\n      border-bottom: 1px solid #ddd;\n   }\n   .list-display li:last-child {\n      border-bottom: none;\n   }\n}\",\n\"js\": \"const imageForm = document.getElementById('image-form');\n   const classifyButton = document.getElementById('classify-button');\n   const imageResult = document.getElementById('image-result');\n   const predictedLabel = document.getElementById('predicted-label');\n   classifyButton.addEventListener('click', classifyImage);\n   async function classifyImage() {\n      const image = document.getElementById('image').files[0];\n      const formData = new FormData();\n      formData.append('image', image);\n      try {\n         const response = await fetch('http://34.142.220.207:8000/api/image-classification', {\n            method: 'POST',\n            body: formData\n         });\n         const data = await response.json();\n         const predictedLabelElement = document.createElement('p');\n         predictedLabelElement.textContent = `Predicted Label: ${data.predicted_label}`;\n         predictedLabel.appendChild(predictedLabelElement);\n         const predictedLabelProbabilityElement = document.createElement('p');\n         predictedLabelProbabilityElement.textContent = `Predicted Label Probability: ${data.probability}`;\n         predictedLabel.appendChild(predictedLabelProbabilityElement);\n      } catch (error) {\n         console.error(error);\n         const errorMessageElement = document.createElement('p');\n         errorMessageElement.textContent = 'Error: Invalid file format or empty upload';\n         predictedLabel.appendChild(errorMessageElement');\n      }\n   }\n\"}"
"{\"html\": \"<!DOCTYPE html>\n<html lang=\\\"en\\\">\n   <head>\n      <meta charset=\\\"UTF-8\\\">\n      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n      <title>Image Classification</title>\n      <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\">\n   </head>\n   <body>\n      <nav>\n         <ul>\n            <li><a href=\\\"#\\\">Home</a></li>\n            <li><a href=\\\"#about\\\">About</a></li>\n         </ul>\n      </nav>\n      <main>\n         <div class=\\\"responsive-card\\\">\n            <h1>Image Classification</h1>\n            <p>Classify an image into one of the 1000 classes using the provided model.</p>\n            <form id=\\\"image-form\\\">\n               <input type=\\\"file\\\" id=\\\"image\\\" accept=\\\".jpg, .jpeg, .png\\\" aria-label=\\\"Upload Image\\\" />\n               <button id=\\\"classify-button\\\">Classify Image</button>\n            <div id=\\\"image-result\\\"></div>\n            <div id=\\\"predicted-label\\\"></div>\n         </div>\n      </main>\n      <footer>\n         <p>Image Classification Task</p>\n         <p>API URL: <a href=\\\"http://34.142.220.207:8000/api/image-classification\\\">http://34.142.220.207:8000/api/image-classification</a></p>\n         <p>Version: 1.0</p>\n      </footer>\n      <script src=\\\"script.js\\\"></script>\n   </body>\n</html>\",\n\"css\": \".responsive-card {\n      max-width: 800px;\n      margin: 40px auto;\n      padding: 20px;\n      border-radius: 10px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n   }\n   #image-form {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n   }\n   #image {\n      margin-bottom: 20px;\n   }\n   #classify-button {\n      background-color: #4CAF50;\n      color: #fff;\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n   }\n   #classify-button:hover {\n      background-color: #3e8e41;\n   }\n   #image-result {\n      margin-top: 20px;\n   }\n   #predicted-label {\n      margin-top: 20px;\n   }\n   @media only screen and (max-width: 600px) {\n      .responsive-card {\n         width: 100%;\n         padding: 10px;\n      }\n   }\n   .image-preview {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius: 10px;\n   }\n   .probability-bar {\n      width: 100%;\n      height: 20px;\n      background-color: #ddd;\n      border-radius: 10px;\n   }\n   .list-display {\n      list-style: none;\n   }\n   .list-display li {\n      padding: 10px;\n      border-bottom: 1px solid #ddd;\n   }\n   .list-display li:last-child {\n      border-bottom: none;\n   }\n}\",\n\"js\": \"const imageForm = document.getElementById('image-form');\n   const classifyButton = document.getElementById('classify-button');\n   const imageResult = document.getElementById('image-result');\n   const predictedLabel = document.getElementById('predicted-label');\n   classifyButton.addEventListener('click', classifyImage);\n   async function classifyImage() {\n      const image = document.getElementById('image').files[0];\n      const formData = new FormData();\n      formData.append('image', image);\n      try {\n         const response = await fetch('http://34.142.220.207:8000/api/image-classification', {\n            method: 'POST',\n            body: formData\n         });\n         const data = await response.json();\n         const predictedLabelElement = document.createElement('p');\n         predictedLabelElement.textContent = `Predicted Label: ${data.predicted_label}`;\n         predictedLabel.appendChild(predictedLabelElement);\n         const predictedLabelProbabilityElement = document.createElement('p');\n         predictedLabelProbabilityElement.textContent = `Predicted Label Probability: ${data.probability}`;\n         predictedLabel.appendChild(predictedLabelProbabilityElement);\n      } catch (error) {\n         console.error(error);\n         const errorMessageElement = document.createElement('p');\n         errorMessageElement.textContent = 'Error: Invalid file format or empty upload';\n         predictedLabel.appendChild(errorMessageElement');\n      }\n   }\n\"}"
if __name__ == "__main__":
    data = json.loads(data)
    print(type(data))
    # Output will be a dictionary with keys "html", "css", and "js" containing JSON strings.